class CfgSkeletons {
    class Default {
        isDiscrete = 1;
        skeletonInherit = "";
        skeletonBones[] = {};
    };
    class trench: Default {
        isDiscrete = 1;
        skeletonInherit = "";
        skeletonBones[] = {
            "rise",""
        };
    };
    class deform_trench: Default {
        isDiscrete = 1;
        skeletonInherit = "";
        skeletonBones[] = {
            "drop","",
            "rise",""
        };
    };
    class triangle_skeleton:Default
	{
		skeletonInherit = "Default";
		skeletonBones[] =
		{
			// Pairs: 1st is newly defined bone, second is it`s "parent" in the skeleton (bone hierarchy).
			"Corner_1",				"",
			"Corner_2",				"",
			"Corner_3",				""
		};
	};
};

class CfgModels {
    class Default {
        sectionsInherit="";
        sections[] = {""};
        skeletonName = "";
    };
    class trench_short: Default {
        sectionsInherit = "";
        sections[] = {"velka", "rise", "fxSource01", "fxSource02", "fxSource03", "fxSource04", "fxSource05", "fxSource06", "fxSource07"};
        skeletonName = "trench";

        class Animations
        {
            class rise {
                type = "translationY";
                selection = "rise";
                axis = "rise_axis";
                minValue = "-1.2";
                maxValue = "0";
                offset0 = "0";
                offset1 = "1";
            };
        };
    };
    class trench_small: Default {
        sectionsInherit = "";
        sections[] = {"velka", "rise", "fxSource01", "fxSource02", "fxSource03", "fxSource04", "fxSource05"};
        skeletonName = "trench";

        class Animations
        {
            class rise {
                type = "translationY";
                selection = "rise";
                axis = "rise_axis";
                minValue = "-0.585";
                maxValue = "0";
                offset0 = "0";
                offset1 = "1";
            };
        };
    };
    class trench_big: Default {
        sectionsInherit = "";
        sections[] = {"velka", "rise", "fxSource01", "fxSource02", "fxSource03", "fxSource04", "fxSource05", "fxSource06", "fxSource07"};
        skeletonName = "trench";

        class Animations
        {
            class rise {
                type = "translationY";
                selection = "rise";
                axis = "rise_axis";
                minValue = "-1.53";
                maxValue = "0";
                offset0 = "0";
                offset1 = "1";
            };
        };
    };
    class trench_giant: Default {
        sectionsInherit = "";
        sections[] = {"velka", "rise", "fxSource01", "fxSource02", "fxSource03", "fxSource04", "fxSource05", "fxSource06", "fxSource07", "fxSource08", "fxSource09", "fxSource10", "fxSource11"};
        skeletonName = "trench";

        class Animations
        {
            class rise {
                type = "translationY";
                selection = "rise";
                axis = "rise_axis";
                minValue = "-1.82";
                maxValue = "0";
                offset0 = "0";
                offset1 = "1";
            };
        };
    };
    class trench_vehicle: Default {
        sectionsInherit = "";
        sections[] = {"velka", "rise", "fxSource01", "fxSource02", "fxSource03", "fxSource04", "fxSource05", "fxSource06", "fxSource07", "fxSource08", "fxSource09", "fxSource10", "fxSource11", "fxSource12", "fxSource13"};
        skeletonName = "trench";

        class Animations
        {
            class rise {
                type = "translationY";
                selection = "rise";
                axis = "rise_axis";
                minValue = "-2";
                maxValue = "0";
                offset0 = "0";
                offset1 = "1";
            };
        };
    };
    class trench_long: Default {
        sectionsInherit = "";
        sections[] = {"velka", "rise", "fxSource01", "fxSource02", "fxSource03", "fxSource04", "fxSource05", "fxSource06", "fxSource07", "fxSource08", "fxSource09", "fxSource10", "fxSource11", "fxSource12", "fxSource13", "fxSource14", "fxSource15"};
        skeletonName = "trench";

        class Animations
        {
            class rise {
                type = "translationY";
                selection = "rise";
                axis = "rise_axis";
                minValue = "-1.72";
                maxValue = "0";
                offset0 = "0";
                offset1 = "1";
            };
        };
    };
    class trench_fightinghole: Default {
        sectionsInherit = "";
        sections[] = {"rise", "drop", "texture_01", "texture_02", "texture_03", "texture_04", "fxSource01", "fxSource02", "fxSource03", "fxSource04", "fxSource05", "fxSource06", "p1", "p2", "p3", "p4", "p5", "p6"};
        skeletonName = "deform_trench";

        class Animations
        {
            class drop {
                type = "translationY";
                selection = "drop";
                source = "drop";
                axis = "drop_axis";
                minValue = 0;
                maxValue = 1.22;
                phaseBeg = 0;
                phaseEnd = 1.22;
            };
            class rise {
                type = "translationY";
                selection = "rise";
                source = "rise";
                axis = "";
                minValue = -0.4;
                maxValue = 0;
            };
        };
    };

    class triangle_filler: Default // class name must be the same as name of p3d
	{
		skeletonName = "triangle_skeleton"; // Set to use above defined skeleton.
		sections[] =
		{
			// Selections from the model that are used in config.cpp for switching textures and materials.
			"camo"
		};
		sectionsInherit = "";
		class Animations
		{
			class Corner_1_UD //ud for up down
			{
				type			= translationY;
				source			= Corner_1_UD_source; // Controler defined in class AnimationSources in config.cpp.
				selection		= Corner_1; // Selection from p3d that also has to be defined as a bone in this model`s skeleton.
				axis			= ""; // Axis of the rotation.
				memory			= 0;
				minValue		= -12; // Value of the controller at which the rotation will be angle0
				maxValue		= 12; // Value of the controller at which the rotation will be angle1
				offset0			= -12;
				offset1			= 12;
				//angle0			= 0;
				//angle1			= (rad 110); // "rad" converts from degrees to radians
			};
			class Corner_1_LR //lr for left right
			{
				type			= translationX;
				source			= Corner_1_LR_source; // Controler defined in class AnimationSources in config.cpp.
				selection		= Corner_1; // Selection from p3d that also has to be defined as a bone in this model`s skeleton.
				axis			= ""; // Axis of the rotation.
				memory			= 0;
				minValue		= -12; // Value of the controller at which the rotation will be angle0
				maxValue		= 12; // Value of the controller at which the rotation will be angle1
				offset0			= -12;
				offset1			= 12;
				//angle0			= 0;
				//angle1			= (rad 110); // "rad" converts from degrees to radians
			};
			class Corner_1_FB //FB for forward backwards
			{
				type			= translationZ;
				source			= Corner_1_FB_source; // Controler defined in class AnimationSources in config.cpp.
				selection		= Corner_1; // Selection from p3d that also has to be defined as a bone in this model`s skeleton.
				axis			= ""; // Axis of the rotation.
				memory			= 0;
				minValue		= -12; // Value of the controller at which the rotation will be angle0
				maxValue		= 12; // Value of the controller at which the rotation will be angle1
				offset0			= -12;
				offset1			= 12;
				//angle0			= 0;
				//angle1			= (rad 110); // "rad" converts from degrees to radians
			};
			class Corner_2_UD //ud for up down
			{
				type			= translationY;
				source			= Corner_2_UD_source; // Controler defined in class AnimationSources in config.cpp.
				selection		= Corner_2; // Selection from p3d that also has to be defined as a bone in this model`s skeleton.
				axis			= ""; // Axis of the rotation.
				memory			= 0;
				minValue		= -12; // Value of the controller at which the rotation will be angle0
				maxValue		= 12; // Value of the controller at which the rotation will be angle1
				offset0			= -12;
				offset1			= 12;
				//angle0			= 0;
				//angle1			= (rad 110); // "rad" converts from degrees to radians
			};
			class Corner_2_LR //lr for left right
			{
				type			= translationX;
				source			= Corner_2_LR_source; // Controler defined in class AnimationSources in config.cpp.
				selection		= Corner_2; // Selection from p3d that also has to be defined as a bone in this model`s skeleton.
				axis			= ""; // Axis of the rotation.
				memory			= 0;
				minValue		= -12; // Value of the controller at which the rotation will be angle0
				maxValue		= 12; // Value of the controller at which the rotation will be angle1
				offset0			= -12;
				offset1			= 12;
				//angle0			= 0;
				//angle1			= (rad 110); // "rad" converts from degrees to radians
			};
			class Corner_2_FB //FB for forward backwards
			{
				type			= translationZ;
				source			= Corner_2_FB_source; // Controler defined in class AnimationSources in config.cpp.
				selection		= Corner_2; // Selection from p3d that also has to be defined as a bone in this model`s skeleton.
				axis			= ""; // Axis of the rotation.
				memory			= 0;
				minValue		= -12; // Value of the controller at which the rotation will be angle0
				maxValue		= 12; // Value of the controller at which the rotation will be angle1
				offset0			= -12;
				offset1			= 12;
				//angle0			= 0;
				//angle1			= (rad 110); // "rad" converts from degrees to radians
			};
			class Corner_3_UD //ud for up down
			{
				type			= translationY;
				source			= Corner_3_UD_source; // Controler defined in class AnimationSources in config.cpp.
				selection		= Corner_3; // Selection from p3d that also has to be defined as a bone in this model`s skeleton.
				axis			= ""; // Axis of the rotation.
				memory			= 0;
				minValue		= -12; // Value of the controller at which the rotation will be angle0
				maxValue		= 12; // Value of the controller at which the rotation will be angle1
				offset0			= -12;
				offset1			= 12;
				//angle0			= 0;
				//angle1			= (rad 110); // "rad" converts from degrees to radians
			};
			class Corner_3_LR //lr for left right
			{
				type			= translationX;
				source			= Corner_3_LR_source; // Controler defined in class AnimationSources in config.cpp.
				selection		= Corner_3; // Selection from p3d that also has to be defined as a bone in this model`s skeleton.
				axis			= ""; // Axis of the rotation.
				memory			= 0;
				minValue		= -12; // Value of the controller at which the rotation will be angle0
				maxValue		= 12; // Value of the controller at which the rotation will be angle1
				offset0			= -12;
				offset1			= 12;
				//angle0			= 0;
				//angle1			= (rad 110); // "rad" converts from degrees to radians
			};
			class Corner_3_FB //FB for forward backwards
			{
				type			= translationZ;
				source			= Corner_3_FB_source; // Controler defined in class AnimationSources in config.cpp.
				selection		= Corner_3; // Selection from p3d that also has to be defined as a bone in this model`s skeleton.
				axis			= ""; // Axis of the rotation.
				memory			= 0;
				minValue		= -12; // Value of the controller at which the rotation will be angle0
				maxValue		= 12; // Value of the controller at which the rotation will be angle1
				offset0			= -12;
				offset1			= 12;
				//angle0			= 0;
				//angle1			= (rad 110); // "rad" converts from degrees to radians
			};

		};
	};

    	class triangleLarge_filler: Default // class name must be the same as name of p3d
	{
		skeletonName = "triangle_skeleton"; // Set to use above defined skeleton.
		sections[] =
		{
			// Selections from the model that are used in config.cpp for switching textures and materials.
			"camo"
		};
		sectionsInherit = "";
		class Animations
		{
			class Corner_1_UD //ud for up down
			{
				type			= translationY;
				source			= Corner_1_UD_source; // Controler defined in class AnimationSources in config.cpp.
				selection		= Corner_1; // Selection from p3d that also has to be defined as a bone in this model`s skeleton.
				axis			= ""; // Axis of the rotation.
				memory			= 0;
				minValue		= -36; // Value of the controller at which the rotation will be angle0
				maxValue		= 36; // Value of the controller at which the rotation will be angle1
				offset0			= -36;
				offset1			= 36;
				//angle0			= 0;
				//angle1			= (rad 110); // "rad" converts from degrees to radians
			};
			class Corner_1_LR //lr for left right
			{
				type			= translationX;
				source			= Corner_1_LR_source; // Controler defined in class AnimationSources in config.cpp.
				selection		= Corner_1; // Selection from p3d that also has to be defined as a bone in this model`s skeleton.
				axis			= ""; // Axis of the rotation.
				memory			= 0;
				minValue		= -36; // Value of the controller at which the rotation will be angle0
				maxValue		= 36; // Value of the controller at which the rotation will be angle1
				offset0			= -36;
				offset1			= 36;
				//angle0			= 0;
				//angle1			= (rad 110); // "rad" converts from degrees to radians
			};
			class Corner_1_FB //FB for forward backwards
			{
				type			= translationZ;
				source			= Corner_1_FB_source; // Controler defined in class AnimationSources in config.cpp.
				selection		= Corner_1; // Selection from p3d that also has to be defined as a bone in this model`s skeleton.
				axis			= ""; // Axis of the rotation.
				memory			= 0;
				minValue		= -36; // Value of the controller at which the rotation will be angle0
				maxValue		= 36; // Value of the controller at which the rotation will be angle1
				offset0			= -36;
				offset1			= 36;
				//angle0			= 0;
				//angle1			= (rad 110); // "rad" converts from degrees to radians
			};
			class Corner_2_UD //ud for up down
			{
				type			= translationY;
				source			= Corner_2_UD_source; // Controler defined in class AnimationSources in config.cpp.
				selection		= Corner_2; // Selection from p3d that also has to be defined as a bone in this model`s skeleton.
				axis			= ""; // Axis of the rotation.
				memory			= 0;
				minValue		= -36; // Value of the controller at which the rotation will be angle0
				maxValue		= 36; // Value of the controller at which the rotation will be angle1
				offset0			= -36;
				offset1			= 36;
				//angle0			= 0;
				//angle1			= (rad 110); // "rad" converts from degrees to radians
			};
			class Corner_2_LR //lr for left right
			{
				type			= translationX;
				source			= Corner_2_LR_source; // Controler defined in class AnimationSources in config.cpp.
				selection		= Corner_2; // Selection from p3d that also has to be defined as a bone in this model`s skeleton.
				axis			= ""; // Axis of the rotation.
				memory			= 0;
				minValue		= -36; // Value of the controller at which the rotation will be angle0
				maxValue		= 36; // Value of the controller at which the rotation will be angle1
				offset0			= -36;
				offset1			= 36;
				//angle0			= 0;
				//angle1			= (rad 110); // "rad" converts from degrees to radians
			};
			class Corner_2_FB //FB for forward backwards
			{
				type			= translationZ;
				source			= Corner_2_FB_source; // Controler defined in class AnimationSources in config.cpp.
				selection		= Corner_2; // Selection from p3d that also has to be defined as a bone in this model`s skeleton.
				axis			= ""; // Axis of the rotation.
				memory			= 0;
				minValue		= -36; // Value of the controller at which the rotation will be angle0
				maxValue		= 36; // Value of the controller at which the rotation will be angle1
				offset0			= -36;
				offset1			= 36;
				//angle0			= 0;
				//angle1			= (rad 110); // "rad" converts from degrees to radians
			};
			class Corner_3_UD //ud for up down
			{
				type			= translationY;
				source			= Corner_3_UD_source; // Controler defined in class AnimationSources in config.cpp.
				selection		= Corner_3; // Selection from p3d that also has to be defined as a bone in this model`s skeleton.
				axis			= ""; // Axis of the rotation.
				memory			= 0;
				minValue		= -36; // Value of the controller at which the rotation will be angle0
				maxValue		= 36; // Value of the controller at which the rotation will be angle1
				offset0			= -36;
				offset1			= 36;
				//angle0			= 0;
				//angle1			= (rad 110); // "rad" converts from degrees to radians
			};
			class Corner_3_LR //lr for left right
			{
				type			= translationX;
				source			= Corner_3_LR_source; // Controler defined in class AnimationSources in config.cpp.
				selection		= Corner_3; // Selection from p3d that also has to be defined as a bone in this model`s skeleton.
				axis			= ""; // Axis of the rotation.
				memory			= 0;
				minValue		= -36; // Value of the controller at which the rotation will be angle0
				maxValue		= 36; // Value of the controller at which the rotation will be angle1
				offset0			= -36;
				offset1			= 36;
				//angle0			= 0;
				//angle1			= (rad 110); // "rad" converts from degrees to radians
			};
			class Corner_3_FB //FB for forward backwards
			{
				type			= translationZ;
				source			= Corner_3_FB_source; // Controler defined in class AnimationSources in config.cpp.
				selection		= Corner_3; // Selection from p3d that also has to be defined as a bone in this model`s skeleton.
				axis			= ""; // Axis of the rotation.
				memory			= 0;
				minValue		= -36; // Value of the controller at which the rotation will be angle0
				maxValue		= 36; // Value of the controller at which the rotation will be angle1
				offset0			= -36;
				offset1			= 36;
				//angle0			= 0;
				//angle1			= (rad 110); // "rad" converts from degrees to radians
			};

		};
	};
};
